// Generated by CoffeeScript 1.7.1
(function() {
  var Recorder, copyBuffer, getUserMedia;

  Recorder = (function() {
    function Recorder() {
      this.onDone = null;
      this.onError = null;
      this.onStart = null;
      this._buffers = [];
      this._sampleCount = 0;
      this._sampleRate = 0;
      this._stopped = false;
      this._stream = null;
    }

    Recorder.prototype.start = function() {
      return getUserMedia((function(_this) {
        return function(err, stream) {
          if (_this._stopped) {
            stream.stop();
            if (typeof _this.onDone === "function") {
              _this.onDone();
            }
            return;
          }
          if (err != null) {
            return typeof _this.onError === "function" ? _this.onError(err) : void 0;
          }
          _this._stream = stream;
          return _this._handleStream();
        };
      })(this));
    };

    Recorder.prototype.stop = function() {
      this._stopped = true;
      if (this._stream != null) {
        return this._stream.stop();
      }
    };

    Recorder.prototype._handleStream = function() {
      var AudioContext, context, processor, source;
      AudioContext = window.AudioContext || window.webkitAudioContext;
      context = new AudioContext();
      source = context.createMediaStreamSource(this._stream);
      processor = context.createScriptProcessor(1024, 1, 1);
      processor.onaudioprocess = (function(_this) {
        return function(evt) {
          var data;
          if (_this._sampleRate === 0) {
            _this._sampleRate = Math.round(evt.inputBuffer.sampleRate);
          }
          data = evt.inputBuffer.getChannelData(0);
          _this._buffers.push(copyBuffer(data));
          _this._sampleCount += data.length;
          return evt.outputBuffer = evt.inputBuffer;
        };
      })(this);
      source.connect(processor);
      processor.connect(context.destination);
      this._stream.onended = (function(_this) {
        return function() {
          source.disconnect(processor);
          processor.disconnect(context.destination);
          if (_this.onDone != null) {
            return _this.onDone(_this._generateSound());
          }
        };
      })(this);
      return typeof this.onStart === "function" ? this.onStart() : void 0;
    };

    Recorder.prototype._generateSound = function() {
      var buffer, byteIdx, size, subList, view, x, _i, _j, _len, _len1, _ref;
      size = 44 + this._sampleCount * 2;
      buffer = new ArrayBuffer(size);
      view = new DataView(buffer);
      window.jswav.Sound._setupHeader(view, this._sampleCount, this._sampleRate);
      byteIdx = 44;
      _ref = this._buffers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subList = _ref[_i];
        for (_j = 0, _len1 = subList.length; _j < _len1; _j++) {
          x = subList[_j];
          view.setInt16(byteIdx, Math.round(x * 0x8000), true);
          byteIdx += 2;
        }
      }
      return new window.jswav.Sound(buffer, view);
    };

    return Recorder;

  })();

  copyBuffer = function(buffer) {
    var i, res, x, _i, _len;
    res = new Float32Array(buffer.length);
    for (i = _i = 0, _len = buffer.length; _i < _len; i = ++_i) {
      x = buffer[i];
      res[i] = x;
    }
    return res;
  };

  getUserMedia = function(cb) {
    var gum, key, keys, _i, _len;
    keys = ['getUserMedia', 'webkitGetUserMedia', 'mozGetUserMedia', 'msGetUserMedia'];
    gum = null;
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      if ((gum = navigator[key]) != null) {
        break;
      }
    }
    if (gum == null) {
      setTimeout((function() {
        return cb('getUserMedia unavailable', null);
      }), 10);
      return;
    }
    return gum.call(navigator, {
      audio: true,
      video: false
    }, function(stream) {
      return cb(null, stream);
    }, function(err) {
      if (err != null) {
        return cb(err, null);
      } else {
        return cb('Unknown error', null);
      }
    });
  };

  if (window.jswav == null) {
    window.jswav = {};
  }

  window.jswav.Recorder = Recorder;

}).call(this);
// Generated by CoffeeScript 1.7.1
(function() {
  var Sound;

  Sound = (function() {
    function Sound(buffer, view) {
      this.buffer = buffer;
      this.view = view;
    }

    Sound.prototype.averageSamples = function(start, end) {
      var i, sum, _i;
      sum = 0;
      for (i = _i = start; start <= end ? _i < end : _i > end; i = start <= end ? ++_i : --_i) {
        sum += Math.abs(this.getSample(i));
      }
      return sum / (end - start);
    };

    Sound.prototype.base64 = function() {
      var binary, bytes, x, _i, _len;
      binary = '';
      bytes = new Uint8Array(this.buffer);
      for (_i = 0, _len = bytes.length; _i < _len; _i++) {
        x = bytes[_i];
        binary += String.fromCharCode(x);
      }
      return window.btoa(binary);
    };

    Sound.prototype.crop = function(start, end) {
      var buffer, dest, endIdx, maximum, rate, sampleCount, size, source, startIdx, view, _i, _ref, _ref1;
      maximum = view.getUint32(40) / 2;
      rate = view.getUint32(24);
      startIdx = Math.max(0, Math.min(start * rate, maximum));
      endIdx = Math.max(0, Math.min(end * rate, maximum));
      sampleCount = endIdx - startIdx;
      size = 44 + sampleCount * 2;
      buffer = new ArrayBuffer(size);
      view = new DataView(buffer);
      Sound._setupHeader(view, sampleCount, sampleRate);
      dest = 44;
      for (source = _i = _ref = startIdx * 2, _ref1 = endIdx * 2; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; source = _ref <= _ref1 ? ++_i : --_i) {
        view.setUint8(dest, oldView.getUint8(source));
        ++dest;
      }
      return new Sound(buffer, view);
    };

    Sound.prototype.getDuration = function() {
      return this.getSampleCount() / this.getSampleRate();
    };

    Sound.prototype.getSample = function(idx) {
      return this.view.getInt16(44 + idx * 2, true) / 0x8000;
    };

    Sound.prototype.getSampleCount = function() {
      return this.view.getUint32(40, true) / 2;
    };

    Sound.prototype.getSampleRate = function() {
      return this.view.getUint32(24, true);
    };

    Sound.prototype.volumeAverages = function(count) {
      var end, i, perAverage, res, start, total, _i;
      total = this.getSampleCount();
      perAverage = total / count;
      res = [];
      for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {
        start = Math.floor(i * total / count);
        end = start + Math.floor(total / count);
        if (end > total) {
          end = total;
        }
        res.push(this.averageSamples(start, end));
      }
      return res;
    };

    Sound.fromBase64 = function(b64) {
      var buffer, bytes, i, raw, view, _i, _ref;
      raw = window.atob(b64);
      buffer = new ArrayBuffer(raw.length);
      bytes = new Uint8Array(buffer);
      for (i = _i = 0, _ref = raw.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        bytes[i] = raw.charCodeAt(i);
      }
      view = new DataView(buffer);
      return new Sound(buffer, view);
    };

    Sound._setupHeader = function(view, sampleCount, sampleRate) {
      var size;
      size = 44 + sampleCount * 2;
      view.setUint32(0, 0x46464952, true);
      view.setUint32(4, size - 8, true);
      view.setUint32(8, 0x45564157, true);
      view.setUint32(12, 0x20746d66, true);
      view.setUint32(16, 0x10, true);
      view.setUint16(20, 1, true);
      view.setUint16(22, 1, true);
      view.setUint32(24, sampleRate, true);
      view.setUint32(28, sampleRate * 2, true);
      view.setUint16(32, 2, true);
      view.setUint16(34, 16, true);
      view.setUint32(36, 0x61746164, true);
      return view.setUint32(40, sampleCount * 2, true);
    };

    return Sound;

  })();

  if (window.jswav == null) {
    window.jswav = {};
  }

  window.jswav.Sound = Sound;

}).call(this);
