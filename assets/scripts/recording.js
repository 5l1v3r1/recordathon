// Generated by CoffeeScript 1.7.1
(function() {
  var Cropper, Recording;

  Cropper = (function() {
    function Cropper(audio, start, end) {
      this.audio = audio;
      this.start = start;
      this.end = end;
      this.element = document.createElement('div');
      this.canvas = document.createElement('canvas');
      this.canvas.width = 400;
      this.canvas.height = 100;
      this.context = this.canvas.getContext('2d');
      this.element.appendChild(this.canvas);
      setTimeout(((function(_this) {
        return function() {
          return _this.draw();
        };
      })(this)), 1000);
    }

    Cropper.prototype.draw = function() {
      console.log('in draw');
      this.context.fillStyle = '#f00';
      return this.context.fillRect(0, 0, 50, 50);
    };

    Cropper.prototype.sound = function() {
      return this.audio.crop(this.start, this.end);
    };

    return Cropper;

  })();

  Recording = (function() {
    function Recording(element, audio, cropStart, cropEnd) {
      this.element = element;
      this.audio = audio != null ? audio : null;
      if (cropStart == null) {
        cropStart = 0;
      }
      if (cropEnd == null) {
        cropEnd = 0;
      }
      this.cropper = null;
      this.nameField = null;
      if (this.audio != null) {
        this.showCropper(cropStart, cropStop);
      } else {
        this.showStartButton();
      }
    }

    Recording.prototype.beginRecording = function(button) {
      var r;
      button.disabled = true;
      r = new window.jswav.Recorder();
      r.onError = (function(_this) {
        return function(err) {
          return _this.showError(err);
        };
      })(this);
      r.onDone = (function(_this) {
        return function(audio) {
          _this.audio = audio;
          return _this.showCropper(0, _this.audio.duration);
        };
      })(this);
      r.onStart = (function(_this) {
        return function() {
          _this.element.innerHTML = '';
          button = document.createElement('button');
          button.innerHTML = 'End recording';
          button.addEventListener('click', function() {
            return r.stop();
          });
          return _this.element.appendChild(button);
        };
      })(this);
      return r.start();
    };

    Recording.prototype.showCropper = function(start, end) {
      this.cropper = new Cropper(this.audio, this.start, this.end);
      this.nameField = document.createElement('input');
      this.nameField.value = 'Untitled' + Math.random();
      this.element.innerHTML = '';
      this.element.appendChild(this.nameField);
      return this.element.appendChild(this.cropper.element);
    };

    Recording.prototype.showError = function(err) {
      var button;
      this.element.innerHTML = 'Error: ' + err + '&nbsp;&nbsp;';
      button = document.createElement('button');
      button.innerHTML = 'Dismiss';
      button.addEventListener('click', (function(_this) {
        return function() {
          return _this.showStartButton();
        };
      })(this));
      return this.element.appendChild(button);
    };

    Recording.prototype.showStartButton = function() {
      var button;
      this.element.innerHTML = '';
      button = document.createElement('button');
      button.innerHTML = 'Start recording';
      button.addEventListener('click', (function(_this) {
        return function() {
          return _this.beginRecording(button);
        };
      })(this));
      return this.element.appendChild(button);
    };

    Recording.prototype.toUpload = function() {
      var dict;
      if (this.cropper == null) {
        return null;
      }
      return dict = {
        name: this.nameField.value,
        data: this.cropper.sound().base64,
        cut: {
          start: this.cropper.start,
          end: this.cropper.end
        }
      };
    };

    return Recording;

  })();

  window.Recording = Recording;

}).call(this);
